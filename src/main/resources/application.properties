
#-------------------------------------------------------------------------
#- This is the main file application.properties file                    --
#-------------------------------------------------------------------------

###########################################################################
## Application
###########################################################################
#spring.application.name=mediscreen-patient
# -- The class annotated with the @ActiveProfiles("test"), will use the file application-test.properties

# -- server port
server.port=8081

###########################################################################
## MySql
###########################################################################
#spring.datasource.url=jdbc:mysql://localhost:3306/mediscreen?serverTimezone=UTC&createDatabaseIfNotExist=TRUE
spring.datasource.url=jdbc:mysql://mysql-db:3306/mediscreen-patient?serverTimezone=UTC&createDatabaseIfNotExist=TRUE&useSSL=false
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=sqluser
spring.datasource.password=Sql2015

###########################################################################
## hibernate
###########################################################################
# -- To fix error : org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role
#    else you can fix directly in the code : @ManyToMany(fetch = FetchType.EAGER)
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# -- To fix MyISAM error
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect

# -- DB init
#    always ? always initialize the database
#    embedded ? always initialize if an embedded database is in use.This is the default if the property value is not specified.
#    never ? never initialize the database
#spring.sql.init.mode=always

# --  DDL init
#     spring.jpa.generate-ddl (boolean) switches the feature on and off and is vendor independent.
#     spring.jpa.hibernate.ddl-auto (enum) is a Hibernate feature that controls the behavior in a more fine-grained way. See below for more detail.
#     Hibernate property values are: create, update, create-drop, validate and none:
#     create ? Hibernate first drops existing tables, then creates new tables
#     update ? the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#     create-drop ? similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#     validate ? Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#     none ? this value effectively turns off the DDL generation
spring.jpa.hibernate.ddl-auto = create
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.generate-ddl=true

# -- sql log
spring.jpa.show-sql = true

# -- sql hibernate log
#logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.SQL=TRACE
logging.level.org.hibernate.type=TRACE

#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
###########################################################################
## sql
###########################################################################
# ca correspond � data-update.sql, injectable au d�but de l'application
#spring.datasource.platform=update
#spring.sql.init.platform=init

###########################################################################
## security
###########################################################################
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration

###########################################################################
## flyway
###########################################################################
#spring.flyway.enabled=true
#spring.flyway.baseline-on-migrate=true
#spring.flyway.clean-on-validation-error=true

###########################################################################
## OpenApi
###########################################################################
#http://localhost:8081/v3/api-docs/
#To use a custom path, we can indicate in the application.properties file:
#springdoc.api-docs.path=/api-docs
#Now we'll be able to access the docs at:
#http://localhost:8081/api-docs/
springdoc.api-docs.path=/api-docs

